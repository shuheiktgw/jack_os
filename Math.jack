// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

  static Array twoToThe;

    /** Initializes the library. */
    function void init() {
      var int i, v;

      let i = 0;
      let v = 1;
      let twoToThe = Array.new(16);

      while(i < 16) {
        let twoToThe[i] = v;

        let i = i + 1;
        let v = v + v;
      }

      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if(x < 0){
        return -x;
      }

      return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int result;

      let result = Math.asbMultiply(x, y);

      if (x < 0) {
        let result = -result;
      }

      if (y < 0) {
        let result = -result;
      }

      return result;
    }

    function int asbMultiply(int x, int y) {
      var int i, sum, shiftedX;

      let x = Math.abs(x);
      let y = Math.abs(y);

      let i = 0;
      let sum = 0;
      let shiftedX = x;

      while(i < 16) {
        if(Math.bit(y, i)){
          let sum = sum + shiftedX;
        }

        let i = i + 1;
        let shiftedX = shiftedX + shiftedX;
      }

      return sum;
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
     function int divide(int x, int y) {
       var int result;

       let result = Math.absDivide(x, y);

       if (x < 0) {
         let result = -result;
       }

       if (y < 0) {
         let result = -result;
       }

       return result;
     }

    function int absDivide(int x, int y) {
      var int q;

      let x = Math.abs(x);
      let y = Math.abs(y);

      if (y > x) {
        return 0;
      }

      let q = Math.absDivide(x, y + y);
      if ((x - ((q + q) * y)) < y) {
        return q + q;
      }

      return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int left, middle, right, result;

      let left = 0;
      let right = Math.min(x, 181);
      let result = 0;

      while(left < (right + 1)) {
        let middle = (left + right) / 2;
        if((middle * middle) > x) {
          let right = middle - 1;
        } else {
          let left = middle + 1;
          let result = middle;
        }
      }

      return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if(a < b){
        return b;
      }

      return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if(a < b){
        return a;
      }

      return b;
    }

    /** 'and' operation is ultimately just a bit level mutiplication.
     *  ex. x = 2, j = 1
     *  x =               0000000000000010
     *  twoToThe[j] = 2 = 0000000000000010
     *  x and twoToThe[j] => 0000000000000010 => 2 > 0
     *
     *  ex. x = 2, j = 0
     *  x =               0000000000000010
     *  twoToThe[j] = 2 = 0000000000000001
     *  x and twoToThe[j] => 0000000000000000 => 0 == 0
     */
    function boolean bit(int x, int j) {
      if((x & twoToThe[j]) > 0) {
        return true;
      }

      return false;
    }
}
