// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

  static Array ram;
  static Array heap;
  static int heapSize;
  static Array freeListHead;
  static Array freeListTail;

  /** Initializes the class. */
  function void init() {
    var Array initialiBlock;

    let ram = 0;
    let heap = 2048;
    let heapSize = 14336;
    let freeListHead = heap;
    let freeListTail = 16382;
    let initialiBlock = heap + 2;
    let initialiBlock[0] = heapSize - 4;
    let initialiBlock[1] = freeListTail;
    let freeListHead[0] = 2;
    let freeListHead[1] = initialiBlock;
    let freeListTail[0] = 2;
    let freeListTail[1] = 0;

    return;
  }

  /** Returns the RAM value at the given address. */
  function int peek(int address) {
    return ram[address];
  }

  /** Sets the RAM value at the given address to the given value. */
  function void poke(int address, int value) {
    let ram[address] = value;
    return;
  }

  /** Finds an available RAM block of the given size and returns
   *  a reference to its base address. */
  function int alloc(int size) {
    var Array currentPointer;
    var Array result;
    var Array temp;

    if(size < 1) {
      do Sys.error(5);
    }

    let currentPointer = freeListHead[1];
    while(true) {
      if(currentPointer = freeListTail) {
        do Sys.error(6);
      }
      if(currentPointer[0] > (size + 2)) {
        let temp = (currentPointer[0] - (size + 1)) + currentPointer;
        let temp[0] = size + 1;
        let result = temp + 1;
        let currentPointer[0] = currentPointer[0] - (size + 1);
        return result;
      }
      let currentPointer = currentPointer[1];
    }
    return result; /** Fake return to supress compiler error */
  }

  /** De-allocates the given object (cast as an array) by making
   *  it available for future allocations. */
  function void deAlloc(Array o) {
    var Array newNode;
    var Array previous;
    var Array current;

    let newNode = o - 1;
    let previous = freeListHead;
    let current = previous[1];

    while(true) {
      if(current > newNode) {
        let newNode[1] = current;
        let previous[1] = newNode;
        do Memory.mergeBlocks(newNode, current);
        do Memory.mergeBlocks(previous, newNode);
        return;
      }
      let previous = previous[1];
      let current = current[1];
    }
    return; /** Fake return to supress compiler error */
  }

  function void mergeBlocks(Array first, Array second) {
    if(first = freeListHead) { return; }
    if(second = freeListTail) { return; }

    if((first + first[0]) = second) {
      let first[0] = first[0] + second[0];
      let first[1] = second[1];
    }
    return;
  }
}
