// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int mLength;
    field int length;
    field boolean minustInt;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength < 0) {
        do Sys.error(20);
      }

      if (maxLength = 0) {
        let str = Array.new(1);
      } else {
        let str = Array.new(maxLength);
      }

      let mLength = maxLength;
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do str.dispose();
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      if (j > (length - 1)) {
        do Sys.error(20);
      }

      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if (j > (length - 1)) {
        do Sys.error(20);
      }

      if (j = length) {
        let length = length + 1;
      }

      let str[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (length = mLength){
        do Sys.error(20);
      }

      let str[length] = c;

      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (length = 0){
        do Sys.error(20);
      }

      let length = length - 1;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int val;
      var int i;
      var int d;
      var boolean isMinus;

      let val = 0;
      let i = 0;

      if (charAt(i) = 45) {
        let isMinus = true;
        let i = i + 1;
      }

      while(i < length){
        let d = String.char2Int(charAt(i));
        let val = val * 10 + d;

        let i = i + 1;
      }

      if (isMinus) {
        let val = -val;
      }

      return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int lastDigit;
      var char c;

      if (val < 0) {
        let minustInt = true;
        let val = -val;
      }

      let length = 0;

      let lastDigit = String.residualByTen(val);
      let c = String.int2Char(lastDigit);

      if(val < 10) {
        if (minustInt) {
          do appendChar(45);
        }

        do appendChar(c);
      } else {
        do setInt(val / 10);
        do appendChar(c);
      }

      return;
    }

    function int residualByTen(int val) {
      var int q;

      let q = val / 10;
      return val - (q * 10);
    }

    function char int2Char(int i) {
      if (i < 0 | i > 9){
        do Sys.error(20);
      }

      return i + 48;
    }

    function char char2Int(char c) {
      if (c < 48 | c > 57){
        do Sys.error(20);
      }

      return c - 48;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
