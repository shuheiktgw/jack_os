// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
      var int i, v;

      let color = true;

      let i = 0;
      let v = 1;
      let twoToThe = Array.new(16);

      while(i < 16) {
        let twoToThe[i] = v;

        let i = i + 1;
        let v = v + v;
      }

      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int q, address, index;

      if((x < 0) | (x > 511)) {
        do Sys.error(7);
      }
      if((y < 0) | (y > 255)) {
        do Sys.error(7);
      }

      let q = x / 16;
      let address = 16384 + (32 * y) + q;
      let index = x - (q * 16);

      if(color) {
        do Memory.poke(address, Memory.peek(address) | twoToThe[index]);
      } else {
        do Memory.poke(address, Memory.peek(address) & (~twoToThe[index]));
      }

      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int a, b, dx, dy, diff;

      if((x1 < 0) | (x2 < 0) | (x1 > 511) | (x2 > 511)) {
        do Sys.error(7);
      }
      if((y1 < 0) | (y2 > 255) | (y1 < 0) | (y2 > 255)) {
        do Sys.error(7);
      }

      let a = 0;
      let b = 0;
      let dx = x2 - x1;
      let dy = y2 - y1;
      let diff = 0;

      while (((x1 + a < x2) | (x1 + a = x2)) & ((y1 + b < y2) | (y1 + b = y2))) {
        do drawPixel(x + a, y + b);

        if (diff < 0) {
          let a = a + 1;
          let diff = diff + dy;
        } else {
          let b = b + 1;
          let diff = diff - dx;
        }
      }

      return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
      var int left;

      let left = x1;
      while(~(left > x2)) {
        do drawPixel(left, y);
        let left = left + 1;
      }

      return;
    }

    function void drawVertialLine(int x, int y1, int y2) {
      var int bottom;

      let bottom = y1;
      while(~(bottom > y2)) {
        do drawPixel(x, bottom);
        let bottom = bottom + 1;
      }

      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int bottom, top, dy, sqrt;

      let bottom = x - r;
      let top = y + r;

      while(~(bottom > top)) {
        let dy = Math.abs(y - bottom);
        let sqrt = Math.sqrt((r*r) - (dy*dy));

        do drawHorizontalLine(x - sqrt + dy, x + sqrt + dy, bottom);
        let bottom = bottom + 1;
      }

      return;
    }
}
